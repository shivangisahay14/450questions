Brute force:O(n^3)

if(a.size()==0) return -1;
int maxv=INT_MIN;
for(i=0;i<n;i++)
    for(int j=i;j<n;j++)
    tmp=1;
        for(k=i;k<=j;k++)
        tmp*=a[k];
        
        
        if(tmp>maxv)
        maxv=tmp;
        
   return maxv;
   
   Optimized solution:O(n)
   
   class Solution {
public:
    int maxProduct(vector<int>& nums) {
         int mx=nums[0],mn=nums[0],sol=nums[0],x,y;
        for(int i=1;i<nums.size();i++)
        {
           x=nums[i]*mx;
            y=nums[i]*mn;
            mx=max(nums[i],max(x,y));
            mn=min(nums[i],min(x,y));
            sol=max(sol,max(mx,mn));
        }
        return sol;
    }
          
};
