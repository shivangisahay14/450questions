first approach: O(n^3)

for(i -> (0-(n-1)))
    for(j -> (i-(n-1))) 
        for(k -> i-j)
        sum+=a[k];
        maxi=max(sum,maxi)
        
   second approach : O(n^2)
   
   for(i -> (0 to n-1))
        for(j ->(0 to n-1))
            sum+=a[j];
            maxi=max(sum,maxi)
            
            
third approach: Kadane's algorithm O(n)
        class Solution {

public int maxSubArray(int[] nums) {

int sum = 0;

int maxi = nums [0];

for (int i = 0;i<nums.length;i++) {

    sum += nums [i];

    if(sum > maxi) 
    maxi = sum; 
    if(sum < 0) sum = 0;

} return maxi;

}

}
