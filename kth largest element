Method 1 (Simple Solution)
A simple solution is to sort the given array using a O(N log N) sorting algorithm like Merge Sort, Heap Sort, etc and return the element at index k-1 in the sorted array.

Time Complexity of this solution is O(N Log N)


Method2

int findKthLargest(vector<int>& nums, int k) {
	priority_queue<int> pq(nums.begin(),nums.end());
	for(int i=1;i<k;++i) pq.pop();
	return pq.top();
}

Method 3
MinHeap using priority_queue

int findKthLargest(vector<int>& nums, int k) {
	priority_queue<int,vector<int>,greater<int>> pq;
	for(int i=0;i<nums.size();++i){
		pq.push(nums[i]);
		if(pq.size()>k) pq.pop();
	}
	return pq.top();            
  
  Method 4
  HeapSort, Implement heapify and buildheap from array

int findKthLargest(vector<int>& nums, int k) {
	buildheap(nums);//maxheap
	for(int i=1;i<k;++i){
		swap(nums[0],nums.back());
		nums.pop_back();
		heapify(nums,0);
	}
	return nums[0];
}
void heapify(vector<int>& nums,int i){
	int leftIdx = (i<<1)+1, rightIdx = (i<<1)+2, largestIdx=i;
	if(leftIdx<nums.size() && nums[leftIdx]>nums[largestIdx]) largestIdx = leftIdx;
	if(rightIdx<nums.size() && nums[rightIdx]>nums[largestIdx]) largestIdx = rightIdx;
	if(largestIdx!=i)
		swap(nums[i], nums[largestIdx]), heapify(nums,largestIdx);
}
void buildheap(vector<int>& nums){
	//lastnodeindex = n-1, so lastParentIdx= (n-1-1)/2 = n/2-1
	for(int i=(nums.size()>>1)-1;i>=0;--i)  heapify(nums,i);
}

Method5
Quick Select
First do partition algo
/ Standard partition process of QuickSort().  It considers the last 
// element as pivot and moves all smaller element to left of it 
// and greater elements to right 
int partition(int arr[], int l, int r) 
{ 
    int x = arr[r], i = l; 
    for (int j = l; j <= r - 1; j++) { 
        if (arr[j] <= x) { 
            swap(&arr[i], &arr[j]); 
            i++; 
        } 
    } 
    swap(&arr[i], &arr[r]); 
    return i; 
} 
  
  
  int kthSmallest(int arr[], int l, int r, int k) 
{ 
    // If k is smaller than number of elements in array 
    if (k > 0 && k <= r - l + 1) { 
        // Partition the array around last element and get 
        // position of pivot element in sorted array 
        int pos = partition(arr, l, r); 
  
        // If position is same as k 
        if (pos - l == k - 1) 
            return arr[pos]; 
        if (pos - l > k - 1) // If position is more, recur for left subarray 
            return kthSmallest(arr, l, pos - 1, k); 
  
        // Else recur for right subarray 
        return kthSmallest(arr, pos + 1, r, k - pos + l - 1); 
    } 
