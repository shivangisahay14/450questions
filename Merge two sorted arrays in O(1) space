Brute force : store both array elements in third array O(n+m)



Another approach: The arrays should be sorted everytime.Compare the elements of first array with the second array,and swap accordingly.
Reorder the array every time after swapping. O(n*m)

int main() {
	//code
	int t;cin>>t;
	
	while(t--){
	    int x,y;
	    cin>>x>>y;
	    
	    int arr1[x];
	    int arr2[y];
	    
	    for(int i=0; i<x; i++){
	        cin>>arr1[i];
	    }
	    for(int i=0; i<y; i++){
	        cin>>arr2[i];
	    }
	    
	    int i=x-1;
	    int j=0;
	    
	    for(;i>=0 && j<y; i--,j++){
	        
	        if(arr1[i]>=arr2[j]){
	            swap(arr1[i],arr2[j]);
	        }
	        else{
	            break;
	        }
	    }
	    
	    sort(arr1,arr1+x);
	    sort(arr2,arr2+y);
	    
	    for(int i=0; i<x; i++){
	        cout<<arr1[i]<<" ";
	    }
	    for(int i=0; i<y; i++){
	        cout<<arr2[i]<<" ";
	    }
	    
	    cout<<"\n";
	}
	return 0;
}

int main() {
	int t;
	cin>>t;
	while(t--){
	    int n,m;
	    cin>>n>>m;
	    int a[n],b[m];
	    for(int i=0;i<n;i++) cin>>a[i];
	    for(int i=0;i<m;i++) cin>>b[i];
	    int i=0,j=0;
	    int k=0;
	    while(i<n && j<m){
	        if(a[i]<b[j]){
	            cout<<a[i++]<<" ";
	        }
	        else{
	            cout<< b[j++]<<" ";
	        }
	    }
	    while(i<n){
	        cout<<a[i++]<<" ";
	    }
	    while(j<m){
	        cout<<b[j++]<<" ";
	    }
	    cout<<endl;
	}
	return 0;
}


gap method:
https://www.youtube.com/watch?v=hVl2b3bLzBw&list=PLgUwDviBIf0rPG3Ictpu74YWBQ1CaBkm2&index=4
