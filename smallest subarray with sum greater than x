Time Complexity: Time complexity of the above approach is clearly O(n2).


int smallestSubWithSum(int arr[], int n, int x)
{
    //  Initilize length of smallest subarray as n+1
     int min_len = n + 1;
 
     // Pick every element as starting point
     for (int start=0; start<n; start++)
     {
          // Initialize sum starting with current start
          int curr_sum = arr[start];
 
          // If first element itself is greater
          if (curr_sum > x) return 1;
 
          // Try different ending points for curremt start
          for (int end=start+1; end<n; end++)
          {
              // add last element to current sum
              curr_sum += arr[end];
 
              // If sum becomes more than x and length of
              // this subarray is smaller than current smallest
              // length, update the smallest length (or result)
              if (curr_sum > x && (end - start + 1) < min_len)
                 min_len = (end - start + 1);
          }
     }
     return min_len;
}

 public static int minSubArrayLength(int[] nums, int k) {
 
        int start = 0;
        int sum = 0;
        int minLength = Integer.MAX_VALUE;
 
        //Move end pointer
        for (int end = 0; end < nums.length; end++) {
 
           //Add value to the sum variable
           sum = sum + nums[end];
 
          //while sum is greater than the value of k
           while (sum >= k && start <= end) {
 
             //Keep track of minLength
              minLength = Math.min(minLength, (end - start) + 1);
 
              /*
                Subtract the value from sum variable and
                Move start pointer
               sum = sum - nums[start++];
             }
          }
 
        return (minLength == Integer.MAX_VALUE) ? 0 : minLength;
    }
 
