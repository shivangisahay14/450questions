Brute force: O(n^2)

func maxProfit(prices []int) int {
    maxProfit := 0
    
    for i := 0; i < len(prices); i++ {
        for j := i+1; j < len(prices); j++ {
            maxProfit = max(maxProfit, prices[j] - prices[i])
        }
    }
    
    return maxProfit
}


second approach : O(n)
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int result = 0, minPrice = INT_MAX;
        for(int i = 0; i < prices.size(); i++) {
            minPrice = min(minPrice, prices[i]);
            result = max(result, prices[i]-minPrice);
        }
        return result;
    }
};
